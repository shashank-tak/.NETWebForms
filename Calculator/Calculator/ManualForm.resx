<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>1. Addition (+):

To add two numbers, follow these steps:
Enter the first number using the number keys (0-9).
Press the "+" button.
Enter the second number.
Press the "=" button to see the result.

2. Subtraction (-):

To subtract one number from another, follow these steps:
Enter the first number.
Press the "-" button.
Enter the second number.
Press the "=" button to see the result.

3. Multiplication (*):

To multiply two numbers, follow these steps:
Enter the first number.
Press the "*" (multiplication) button.
Enter the second number.
Press the "=" button to see the result.

4. Division (/):

To divide one number by another, follow these steps:
Enter the dividend (the number you want to divide).
Press the "/" (division) button.
Enter the divisor (the number you're dividing by).
Press the "=" button to see the result.

5. Clear (C):

To clear the calculator and start over, press the "C" (clear) button. This will reset all calculations and let you begin a new one.

6. CE/Backspace 

To clear the last entry in the calculator value, press the "CE"(Clear Entry) or "Backspace" button.

7. Decimal Point (.):

To enter decimal numbers, use the "." (decimal point) button. For example, if you want to enter 3.14, press "3", ".", "1", "4".

8. Memory Functions (M+ and M-):

The calculator have memory functions like "M+" (add to memory) and "M-" (subtract from memory). These allow you to add/substract values from memory.

9. Percentage (%):

To calculate a percentage of a number, enter the number, press "%", and then enter the percentage you want to calculate.

10. Memory Read (MR)

Reads the stored value from memory and inserts it into the input field (or replaces the entire string with the value from memory).

11. Memory Save (MS)

Saves the result of the calculation to memory.

12. Memory Clear (MC)

Clears the memory cell, that is, makes it empty.

13. +/- (Negation):

To negate (change the sign of) a number, press the "+/-" button. This reverses the sign of the current number on the display.

14. √Square Root (sqrt):

To calculate the square root of a number, enter the number and press the "√" button. The result will be the square root of the entered number.

15. 1/x (Reciprocal):

To calculate the reciprocal of a number, enter the number and press the "1/x" button. The result will be the reciprocal (1 divided by the entered number).

16. Order of Operations:

The calculator follows the standard order of operations (PEMDAS/BODMAS): Parentheses, Exponents, Multiplication and Division (left to right), Addition and Subtraction (left to right).
Remember that different calculators may have additional features and functions, but these are the basic operations you can perform on a typical calculator. Enjoy your calculations!
</value>
  </data>
</root>